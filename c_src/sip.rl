# Generated by abnfc at Fri Feb  5 08:52:23 2021
# Output file: ../c_src/sip.rl
# Sources:
# 	core
# 	basic.abnf
# 	uri.abnf
# 	sip.abnf
%%{
	# write your name
	machine sip;

	# generated rules, define required actions
	ALPHA = 0x41..0x5a | 0x61..0x7a;
	BIT = "0" | "1";
	CHAR = 0x01..0x7f;
	CR = "\r";
	LF = "\n";
	CRLF = CR LF;
	CTL = 0x00..0x1f | 0x7f;
	DIGIT = 0x30..0x39;
	DQUOTE = "\"";
	HEXDIG = DIGIT | "A"i | "B"i | "C"i | "D"i | "E"i | "F"i;
	HTAB = "\t";
	SP = " ";
	WSP = SP | HTAB;
	LWSP = ( WSP | ( CRLF WSP ) )*;
	OCTET = 0x00..0xff;
	VCHAR = 0x21..0x7e;
	alphanum = ALPHA | DIGIT;
	reserved = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | ",";
	mark = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")";
	unreserved = alphanum | mark;
	escaped = "%" HEXDIG HEXDIG;
	LWS = ( WSP* CRLF )? WSP+;
	SWS = LWS?;
	HCOLON = ( SP | HTAB )* ":" SWS;
	UTF8_CONT = 0x80..0xbf;
	UTF8_NONASCII = ( 0xc0..0xdf UTF8_CONT ) | ( 0xe0..0xef UTF8_CONT{2} ) | ( 0xf0..0xf7 UTF8_CONT{3} ) | ( 0xf8..0xfb UTF8_CONT{4} ) | ( 0xfc..0xfd UTF8_CONT{5} );
	TEXT_UTF8char = 0x21..0x7e | UTF8_NONASCII;
	TEXT_UTF8_TRIM = TEXT_UTF8char+ ( LWS* TEXT_UTF8char )*;
	LHEX = DIGIT | 0x61..0x66;
	token = ( alphanum | "-" | "." | "!" | "%" | "*" | "_" | "+" | "`" | "'" | "~" )+;
	separators = "(" | ")" | "<" | ">" | "@" | "," | ";" | ":" | "\\" | DQUOTE | "/" | "[" | "]" | "?" | "=" | "{" | "}" | SP | HTAB;
	word = ( alphanum | "-" | "." | "!" | "%" | "*" | "_" | "+" | "`" | "'" | "~" | "(" | ")" | "<" | ">" | ":" | "\\" | DQUOTE | "/" | "[" | "]" | "?" | "{" | "}" )+;
	qdtext = LWS | "!" | 0x23..0x5b | 0x5d..0x7e | UTF8_NONASCII;
	quoted_pair = "\\" ( 0x00..0x09 | 0x0b..0x0c | 0x0e..0x7f );
	quoted_string = SWS DQUOTE ( qdtext | quoted_pair )* DQUOTE;
	STAR = SWS "*" SWS;
	SLASH = SWS "/" SWS;
	EQUAL = SWS "=" SWS;
	LPAREN = SWS "(" SWS;
	RPAREN = SWS ")" SWS;
	RAQUOT = ">" SWS;
	LAQUOT = SWS "<";
	COMMA = SWS "," SWS;
	SEMI = SWS ";" SWS;
	COLON = SWS ":" SWS;
	LDQUOT = SWS DQUOTE;
	RDQUOT = DQUOTE SWS;
	user_unreserved = "&" | "=" | "+" | "$" | "," | ";" | "?" | "/";
	user = ( unreserved | escaped | user_unreserved )+;
	visual_separator = "-" | "." | "(" | ")";
	phonedigit_hex = HEXDIG | "*" | "#" | visual_separator?;
	tel_pname = ( alphanum | "-" )+;
	param_unreserved = "[" | "]" | "/" | ":" | "&" | "+" | "$";
	pct_encoded = "%" HEXDIG HEXDIG;
	tel_paramchar = param_unreserved | unreserved | pct_encoded;
	tel_pvalue = tel_paramchar+;
	parameter = ";" tel_pname ( "=" tel_pvalue )?;
	telephone_subscriber = "+"? phonedigit_hex+ parameter*;
	password = ( unreserved | escaped | "&" | "=" | "+" | "$" | "," )*;
	userinfo = ( user | telephone_subscriber ) ( ":" password )? "@";
	domainlabel = alphanum | ( alphanum ( alphanum | "-" )* alphanum );
	toplabel = ALPHA | ( ALPHA ( alphanum | "-" )* alphanum );
	hostname = ( domainlabel "." )* toplabel "."?;
	IPv4address = DIGIT{1,3} "." DIGIT{1,3} "." DIGIT{1,3} "." DIGIT{1,3};
	hex4 = HEXDIG{1,4};
	hexseq = hex4 ( ":" hex4 )*;
	hexpart = hexseq | ( hexseq "::" hexseq? ) | ( "::" hexseq? );
	IPv6address = hexpart ( ":" IPv4address )?;
	IPv6reference = "[" IPv6address "]";
	host = hostname | IPv4address | IPv6reference;
	port = DIGIT+;
	hostport = host ( ":" port )?;
	paramchar = param_unreserved | unreserved | escaped;
	pname = paramchar+;
	pvalue = paramchar+;
	other_param = pname ( "=" pvalue )?;
	uri_parameter = other_param;
	uri_parameters = ( ";" uri_parameter )*;
	hnv_unreserved = "[" | "]" | "/" | "?" | ":" | "+" | "$";
	hname = ( hnv_unreserved | unreserved | escaped )+;
	hvalue = ( hnv_unreserved | unreserved | escaped )*;
	header = hname "=" hvalue;
	headers = "?" header ( "&" header )*;
	SIP_URI = "sip:"i userinfo? hostport uri_parameters headers?;
	SIPS_URI = "sips:"i userinfo? hostport uri_parameters headers?;
	telephone_uri = "tel:"i telephone_subscriber;
	phonedigit = DIGIT | visual_separator?;
	uric = reserved | unreserved | pct_encoded;
	extension_method = token;
	Method = extension_method;
	Request_URI = SIP_URI | SIPS_URI | telephone_uri;
	SIP_Version = "SIP"i "/" DIGIT+ "." DIGIT+;
	Request_Line = Method SP Request_URI SP SIP_Version CRLF;
	header_name = token;
	header_value = ( TEXT_UTF8char | UTF8_CONT | LWS )*;
	extension_header = header_name HCOLON header_value;
	message_header = extension_header CRLF;
	message_body = OCTET*;
	Request = Request_Line message_header* CRLF message_body?;
	extension_code = DIGIT{3};
	Status_Code = extension_code;
	Reason_Phrase = ( reserved | unreserved | escaped | UTF8_NONASCII | UTF8_CONT | SP | HTAB )*;
	Status_Line = SIP_Version SP Status_Code SP Reason_Phrase CRLF;
	Response = Status_Line message_header* CRLF message_body?;
	SIP_message = Request | Response;
	gen_value = token | host | quoted_string;
	generic_param = token ( EQUAL gen_value )?;
}%%
